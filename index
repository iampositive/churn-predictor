# Step 1: Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Step 2: Load sample dataset
url = "https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/telecom_churn.csv"
df = pd.read_csv(url)

# Step 3: Explore the dataset
print(df.head())
print(df.info())

# Step 4: Data Preprocessing
# Drop irrelevant columns
df = df.drop(['customerID'], axis=1)

# Convert 'TotalCharges' to numeric, coercing errors (since some may be invalid)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

# Fill missing values with the mean (for TotalCharges)
df['TotalCharges'].fillna(df['TotalCharges'].mean(), inplace=True)

# Encode categorical variables using LabelEncoder
label_encoder = LabelEncoder()
for column in df.select_dtypes(include=['object']).columns:
    df[column] = label_encoder.fit_transform(df[column])

# Step 5: Split the data into features (X) and target (y)
X = df.drop('Churn', axis=1)  # Features (independent variables)
y = df['Churn']  # Target (dependent variable)

# Step 6: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 7: Train a Logistic Regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Step 8: Predict on the test set
y_pred = model.predict(X_test)

# Step 9: Evaluate model accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")
